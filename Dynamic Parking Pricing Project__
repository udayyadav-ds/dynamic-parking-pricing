{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOsWWzYcW1W0+xPSr6JhWUv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"H_NZ__u5zL4X","executionInfo":{"status":"ok","timestamp":1751689839536,"user_tz":-330,"elapsed":47003,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"c599c273-163a-404f-c356-8d18d8c345f2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pathway\n","  Downloading pathway-0.24.1-cp310-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/60.4 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.4/60.4 kB\u001b[0m \u001b[31m2.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: aiohttp>=3.8.4 in /usr/local/lib/python3.11/dist-packages (from pathway) (3.11.15)\n","Requirement already satisfied: click>=8.1 in /usr/local/lib/python3.11/dist-packages (from pathway) (8.2.1)\n","Requirement already satisfied: geopy>=2.4.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (2.4.1)\n","Collecting h3>=4 (from pathway)\n","  Downloading h3-4.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (18 kB)\n","Requirement already satisfied: numpy>=1.21 in /usr/local/lib/python3.11/dist-packages (from pathway) (2.0.2)\n","Requirement already satisfied: pandas>=2.1 in /usr/local/lib/python3.11/dist-packages (from pathway) (2.2.2)\n","Requirement already satisfied: scikit-learn>=1.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (1.6.1)\n","Requirement already satisfied: shapely>=2.0.1 in /usr/local/lib/python3.11/dist-packages (from pathway) (2.1.1)\n","Requirement already satisfied: pyarrow<19.0.0,>=10.0.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (18.1.0)\n","Requirement already satisfied: requests>=2.31.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (2.32.3)\n","Collecting python-sat>=0.1.8.dev0 (from pathway)\n","  Downloading python_sat-1.8.dev17-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl.metadata (1.5 kB)\n","Collecting beartype<0.16.0,>=0.14.0 (from pathway)\n","  Downloading beartype-0.15.0-py3-none-any.whl.metadata (28 kB)\n","Requirement already satisfied: rich>=12.6.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (13.9.4)\n","Collecting diskcache>=5.2.1 (from pathway)\n","  Downloading diskcache-5.6.3-py3-none-any.whl.metadata (20 kB)\n","Collecting boto3<1.36.0,>=1.26.76 (from pathway)\n","  Downloading boto3-1.35.99-py3-none-any.whl.metadata (6.7 kB)\n","Collecting aiobotocore==2.17.0 (from pathway)\n","  Downloading aiobotocore-2.17.0-py3-none-any.whl.metadata (23 kB)\n","Requirement already satisfied: google-api-python-client>=2.108.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (2.174.0)\n","Requirement already satisfied: typing-extensions>=4.8.0 in /usr/local/lib/python3.11/dist-packages (from pathway) (4.14.0)\n","Requirement already satisfied: panel>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from pathway) (1.7.2)\n","Collecting jupyter-bokeh>=3.0.7 (from pathway)\n","  Downloading jupyter_bokeh-4.0.5-py3-none-any.whl.metadata (7.1 kB)\n","Collecting jmespath>=1.0.1 (from pathway)\n","  Downloading jmespath-1.0.1-py3-none-any.whl.metadata (7.6 kB)\n","Collecting aiohttp-cors>=0.7.0 (from pathway)\n","  Downloading aiohttp_cors-0.8.1-py3-none-any.whl.metadata (20 kB)\n","Collecting opentelemetry-api>=1.22.0 (from pathway)\n","  Downloading opentelemetry_api-1.34.1-py3-none-any.whl.metadata (1.5 kB)\n","Collecting opentelemetry-sdk>=1.22.0 (from pathway)\n","  Downloading opentelemetry_sdk-1.34.1-py3-none-any.whl.metadata (1.6 kB)\n","Collecting opentelemetry-exporter-otlp-proto-grpc>=1.22.0 (from pathway)\n","  Downloading opentelemetry_exporter_otlp_proto_grpc-1.34.1-py3-none-any.whl.metadata (2.4 kB)\n","Collecting fs>=2.4.16 (from pathway)\n","  Downloading fs-2.4.16-py2.py3-none-any.whl.metadata (6.3 kB)\n","Collecting async-lru>=2.0.4 (from pathway)\n","  Downloading async_lru-2.0.5-py3-none-any.whl.metadata (4.5 kB)\n","Requirement already satisfied: networkx>=3.2.1 in /usr/local/lib/python3.11/dist-packages (from pathway) (3.5)\n","Collecting google-cloud-pubsub>=2.21.1 (from pathway)\n","  Downloading google_cloud_pubsub-2.30.0-py3-none-any.whl.metadata (10 kB)\n","Collecting google-cloud-bigquery~=3.29.0 (from pathway)\n","  Downloading google_cloud_bigquery-3.29.0-py2.py3-none-any.whl.metadata (7.6 kB)\n","Collecting pydantic~=2.9.0 (from pathway)\n","  Downloading pydantic-2.9.2-py3-none-any.whl.metadata (149 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m149.4/149.4 kB\u001b[0m \u001b[31m6.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: gitpython>=3.1.43 in /usr/local/lib/python3.11/dist-packages (from pathway) (3.1.44)\n","Collecting deltalake<0.18.0,>=0.17.0 (from pathway)\n","  Downloading deltalake-0.17.4-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (5.0 kB)\n","Collecting aioitertools<1.0.0,>=0.5.1 (from aiobotocore==2.17.0->pathway)\n","  Downloading aioitertools-0.12.0-py3-none-any.whl.metadata (3.8 kB)\n","Collecting botocore<1.35.94,>=1.35.74 (from aiobotocore==2.17.0->pathway)\n","  Downloading botocore-1.35.93-py3-none-any.whl.metadata (5.7 kB)\n","Requirement already satisfied: python-dateutil<3.0.0,>=2.1 in /usr/local/lib/python3.11/dist-packages (from aiobotocore==2.17.0->pathway) (2.9.0.post0)\n","Requirement already satisfied: multidict<7.0.0,>=6.0.0 in /usr/local/lib/python3.11/dist-packages (from aiobotocore==2.17.0->pathway) (6.6.3)\n","Requirement already satisfied: urllib3!=2.2.0,<3,>=1.25.4 in /usr/local/lib/python3.11/dist-packages (from aiobotocore==2.17.0->pathway) (2.4.0)\n","Requirement already satisfied: wrapt<2.0.0,>=1.10.10 in /usr/local/lib/python3.11/dist-packages (from aiobotocore==2.17.0->pathway) (1.17.2)\n","Requirement already satisfied: aiohappyeyeballs>=2.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.8.4->pathway) (2.6.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.8.4->pathway) (1.3.2)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.8.4->pathway) (25.3.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.8.4->pathway) (1.7.0)\n","Requirement already satisfied: propcache>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.8.4->pathway) (0.3.2)\n","Requirement already satisfied: yarl<2.0,>=1.17.0 in /usr/local/lib/python3.11/dist-packages (from aiohttp>=3.8.4->pathway) (1.20.1)\n","INFO: pip is looking at multiple versions of boto3 to determine which version is compatible with other requirements. This could take a while.\n","Collecting boto3<1.36.0,>=1.26.76 (from pathway)\n","  Downloading boto3-1.35.98-py3-none-any.whl.metadata (6.7 kB)\n","  Downloading boto3-1.35.97-py3-none-any.whl.metadata (6.7 kB)\n","  Downloading boto3-1.35.96-py3-none-any.whl.metadata (6.7 kB)\n","  Downloading boto3-1.35.95-py3-none-any.whl.metadata (6.7 kB)\n","  Downloading boto3-1.35.94-py3-none-any.whl.metadata (6.7 kB)\n","  Downloading boto3-1.35.93-py3-none-any.whl.metadata (6.7 kB)\n","Collecting s3transfer<0.11.0,>=0.10.0 (from boto3<1.36.0,>=1.26.76->pathway)\n","  Downloading s3transfer-0.10.4-py3-none-any.whl.metadata (1.7 kB)\n","Collecting pyarrow-hotfix (from deltalake<0.18.0,>=0.17.0->pathway)\n","  Downloading pyarrow_hotfix-0.7-py3-none-any.whl.metadata (3.6 kB)\n","Collecting appdirs~=1.4.3 (from fs>=2.4.16->pathway)\n","  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from fs>=2.4.16->pathway) (75.2.0)\n","Requirement already satisfied: six~=1.10 in /usr/local/lib/python3.11/dist-packages (from fs>=2.4.16->pathway) (1.17.0)\n","Requirement already satisfied: geographiclib<3,>=1.52 in /usr/local/lib/python3.11/dist-packages (from geopy>=2.4.0->pathway) (2.0)\n","Requirement already satisfied: gitdb<5,>=4.0.1 in /usr/local/lib/python3.11/dist-packages (from gitpython>=3.1.43->pathway) (4.0.12)\n","Requirement already satisfied: httplib2<1.0.0,>=0.19.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client>=2.108.0->pathway) (0.22.0)\n","Requirement already satisfied: google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client>=2.108.0->pathway) (2.38.0)\n","Requirement already satisfied: google-auth-httplib2<1.0.0,>=0.2.0 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client>=2.108.0->pathway) (0.2.0)\n","Requirement already satisfied: google-api-core!=2.0.*,!=2.1.*,!=2.2.*,!=2.3.0,<3.0.0,>=1.31.5 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client>=2.108.0->pathway) (2.25.1)\n","Requirement already satisfied: uritemplate<5,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from google-api-python-client>=2.108.0->pathway) (4.2.0)\n","Requirement already satisfied: google-cloud-core<3.0.0dev,>=2.4.1 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery~=3.29.0->pathway) (2.4.3)\n","Requirement already satisfied: google-resumable-media<3.0dev,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery~=3.29.0->pathway) (2.7.2)\n","Requirement already satisfied: packaging>=20.0.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-bigquery~=3.29.0->pathway) (24.2)\n","Requirement already satisfied: grpcio<2.0.0,>=1.51.3 in /usr/local/lib/python3.11/dist-packages (from google-cloud-pubsub>=2.21.1->pathway) (1.73.1)\n","Requirement already satisfied: proto-plus<2.0.0,>=1.22.0 in /usr/local/lib/python3.11/dist-packages (from google-cloud-pubsub>=2.21.1->pathway) (1.26.1)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<7.0.0,>=3.20.2 in /usr/local/lib/python3.11/dist-packages (from google-cloud-pubsub>=2.21.1->pathway) (5.29.5)\n","Requirement already satisfied: grpc-google-iam-v1<1.0.0,>=0.12.4 in /usr/local/lib/python3.11/dist-packages (from google-cloud-pubsub>=2.21.1->pathway) (0.14.2)\n","Requirement already satisfied: grpcio-status>=1.33.2 in /usr/local/lib/python3.11/dist-packages (from google-cloud-pubsub>=2.21.1->pathway) (1.71.2)\n","Requirement already satisfied: bokeh==3.* in /usr/local/lib/python3.11/dist-packages (from jupyter-bokeh>=3.0.7->pathway) (3.7.3)\n","Collecting ipywidgets==8.* (from jupyter-bokeh>=3.0.7->pathway)\n","  Downloading ipywidgets-8.1.7-py3-none-any.whl.metadata (2.4 kB)\n","Requirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (3.1.6)\n","Requirement already satisfied: contourpy>=1.2 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (1.3.2)\n","Requirement already satisfied: narwhals>=1.13 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (1.45.0)\n","Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (11.2.1)\n","Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (6.0.2)\n","Requirement already satisfied: tornado>=6.2 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (6.4.2)\n","Requirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.11/dist-packages (from bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (2025.4.0)\n","Collecting comm>=0.1.3 (from ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway)\n","  Downloading comm-0.2.2-py3-none-any.whl.metadata (3.7 kB)\n","Requirement already satisfied: ipython>=6.1.0 in /usr/local/lib/python3.11/dist-packages (from ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (7.34.0)\n","Requirement already satisfied: traitlets>=4.3.1 in /usr/local/lib/python3.11/dist-packages (from ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (5.7.1)\n","Collecting widgetsnbextension~=4.0.14 (from ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway)\n","  Downloading widgetsnbextension-4.0.14-py3-none-any.whl.metadata (1.6 kB)\n","Requirement already satisfied: jupyterlab_widgets~=3.0.15 in /usr/local/lib/python3.11/dist-packages (from ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (3.0.15)\n","Requirement already satisfied: importlib-metadata<8.8.0,>=6.0 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-api>=1.22.0->pathway) (8.7.0)\n","Requirement already satisfied: googleapis-common-protos~=1.52 in /usr/local/lib/python3.11/dist-packages (from opentelemetry-exporter-otlp-proto-grpc>=1.22.0->pathway) (1.70.0)\n","Collecting opentelemetry-exporter-otlp-proto-common==1.34.1 (from opentelemetry-exporter-otlp-proto-grpc>=1.22.0->pathway)\n","  Downloading opentelemetry_exporter_otlp_proto_common-1.34.1-py3-none-any.whl.metadata (1.9 kB)\n","Collecting opentelemetry-proto==1.34.1 (from opentelemetry-exporter-otlp-proto-grpc>=1.22.0->pathway)\n","  Downloading opentelemetry_proto-1.34.1-py3-none-any.whl.metadata (2.4 kB)\n","Collecting opentelemetry-semantic-conventions==0.55b1 (from opentelemetry-sdk>=1.22.0->pathway)\n","  Downloading opentelemetry_semantic_conventions-0.55b1-py3-none-any.whl.metadata (2.5 kB)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.1->pathway) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=2.1->pathway) (2025.2)\n","Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (6.2.0)\n","Requirement already satisfied: linkify-it-py in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (2.0.3)\n","Requirement already satisfied: markdown in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (3.8.2)\n","Requirement already satisfied: markdown-it-py in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (3.0.0)\n","Requirement already satisfied: mdit-py-plugins in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (0.4.2)\n","Requirement already satisfied: param<3.0,>=2.1.0 in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (2.2.1)\n","Requirement already satisfied: pyviz-comms>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (3.0.6)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from panel>=1.3.1->pathway) (4.67.1)\n","Requirement already satisfied: annotated-types>=0.6.0 in /usr/local/lib/python3.11/dist-packages (from pydantic~=2.9.0->pathway) (0.7.0)\n","Collecting pydantic-core==2.23.4 (from pydantic~=2.9.0->pathway)\n","  Downloading pydantic_core-2.23.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.6 kB)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->pathway) (3.4.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->pathway) (3.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.31.0->pathway) (2025.6.15)\n","Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich>=12.6.0->pathway) (2.19.2)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0->pathway) (1.15.3)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0->pathway) (1.5.1)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.0->pathway) (3.6.0)\n","Requirement already satisfied: smmap<6,>=3.0.1 in /usr/local/lib/python3.11/dist-packages (from gitdb<5,>=4.0.1->gitpython>=3.1.43->pathway) (5.0.2)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client>=2.108.0->pathway) (5.5.2)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client>=2.108.0->pathway) (0.4.2)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.11/dist-packages (from google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client>=2.108.0->pathway) (4.9.1)\n","Requirement already satisfied: google-crc32c<2.0dev,>=1.0 in /usr/local/lib/python3.11/dist-packages (from google-resumable-media<3.0dev,>=2.0.0->google-cloud-bigquery~=3.29.0->pathway) (1.7.1)\n","Requirement already satisfied: pyparsing!=3.0.0,!=3.0.1,!=3.0.2,!=3.0.3,<4,>=2.4.2 in /usr/local/lib/python3.11/dist-packages (from httplib2<1.0.0,>=0.19.0->google-api-python-client>=2.108.0->pathway) (3.2.3)\n","Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata<8.8.0,>=6.0->opentelemetry-api>=1.22.0->pathway) (3.23.0)\n","Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py->panel>=1.3.1->pathway) (0.1.2)\n","Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach->panel>=1.3.1->pathway) (0.5.1)\n","Requirement already satisfied: uc-micro-py in /usr/local/lib/python3.11/dist-packages (from linkify-it-py->panel>=1.3.1->pathway) (1.0.3)\n","Collecting jedi>=0.16 (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway)\n","  Downloading jedi-0.19.2-py2.py3-none-any.whl.metadata (22 kB)\n","Requirement already satisfied: decorator in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (4.4.2)\n","Requirement already satisfied: pickleshare in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (0.7.5)\n","Requirement already satisfied: prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (3.0.51)\n","Requirement already satisfied: backcall in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (0.2.0)\n","Requirement already satisfied: matplotlib-inline in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (0.1.7)\n","Requirement already satisfied: pexpect>4.3 in /usr/local/lib/python3.11/dist-packages (from ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (4.9.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from Jinja2>=2.9->bokeh==3.*->jupyter-bokeh>=3.0.7->pathway) (3.0.2)\n","Requirement already satisfied: pyasn1<0.7.0,>=0.6.1 in /usr/local/lib/python3.11/dist-packages (from pyasn1-modules>=0.2.1->google-auth!=2.24.0,!=2.25.0,<3.0.0,>=1.32.0->google-api-python-client>=2.108.0->pathway) (0.6.1)\n","Requirement already satisfied: parso<0.9.0,>=0.8.4 in /usr/local/lib/python3.11/dist-packages (from jedi>=0.16->ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (0.8.4)\n","Requirement already satisfied: ptyprocess>=0.5 in /usr/local/lib/python3.11/dist-packages (from pexpect>4.3->ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (0.7.0)\n","Requirement already satisfied: wcwidth in /usr/local/lib/python3.11/dist-packages (from prompt-toolkit!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0->ipython>=6.1.0->ipywidgets==8.*->jupyter-bokeh>=3.0.7->pathway) (0.2.13)\n","Downloading pathway-0.24.1-cp310-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (69.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m69.7/69.7 MB\u001b[0m \u001b[31m10.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading aiobotocore-2.17.0-py3-none-any.whl (77 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.6/77.6 kB\u001b[0m \u001b[31m5.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading aiohttp_cors-0.8.1-py3-none-any.whl (25 kB)\n","Downloading async_lru-2.0.5-py3-none-any.whl (6.1 kB)\n","Downloading beartype-0.15.0-py3-none-any.whl (777 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m777.6/777.6 kB\u001b[0m \u001b[31m29.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading boto3-1.35.93-py3-none-any.whl (139 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.2/139.2 kB\u001b[0m \u001b[31m10.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading deltalake-0.17.4-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (26.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m26.5/26.5 MB\u001b[0m \u001b[31m43.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading diskcache-5.6.3-py3-none-any.whl (45 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m45.5/45.5 kB\u001b[0m \u001b[31m3.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading fs-2.4.16-py2.py3-none-any.whl (135 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m135.3/135.3 kB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading google_cloud_bigquery-3.29.0-py2.py3-none-any.whl (244 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m244.6/244.6 kB\u001b[0m \u001b[31m14.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading google_cloud_pubsub-2.30.0-py3-none-any.whl (318 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m318.4/318.4 kB\u001b[0m \u001b[31m17.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading h3-4.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (985 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m985.8/985.8 kB\u001b[0m \u001b[31m37.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading jmespath-1.0.1-py3-none-any.whl (20 kB)\n","Downloading jupyter_bokeh-4.0.5-py3-none-any.whl (148 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m148.6/148.6 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ipywidgets-8.1.7-py3-none-any.whl (139 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m139.8/139.8 kB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading opentelemetry_api-1.34.1-py3-none-any.whl (65 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m65.8/65.8 kB\u001b[0m \u001b[31m4.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading opentelemetry_exporter_otlp_proto_grpc-1.34.1-py3-none-any.whl (18 kB)\n","Downloading opentelemetry_exporter_otlp_proto_common-1.34.1-py3-none-any.whl (18 kB)\n","Downloading opentelemetry_proto-1.34.1-py3-none-any.whl (55 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m55.7/55.7 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading opentelemetry_sdk-1.34.1-py3-none-any.whl (118 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m118.5/118.5 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading opentelemetry_semantic_conventions-0.55b1-py3-none-any.whl (196 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m196.2/196.2 kB\u001b[0m \u001b[31m11.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydantic-2.9.2-py3-none-any.whl (434 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m434.9/434.9 kB\u001b[0m \u001b[31m22.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pydantic_core-2.23.4-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m53.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading python_sat-1.8.dev17-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (2.7 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.7/2.7 MB\u001b[0m \u001b[31m49.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading aioitertools-0.12.0-py3-none-any.whl (24 kB)\n","Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)\n","Downloading botocore-1.35.93-py3-none-any.whl (13.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m13.3/13.3 MB\u001b[0m \u001b[31m45.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading s3transfer-0.10.4-py3-none-any.whl (83 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m83.2/83.2 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pyarrow_hotfix-0.7-py3-none-any.whl (7.9 kB)\n","Downloading comm-0.2.2-py3-none-any.whl (7.2 kB)\n","Downloading widgetsnbextension-4.0.14-py3-none-any.whl (2.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m60.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading jedi-0.19.2-py2.py3-none-any.whl (1.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.6/1.6 MB\u001b[0m \u001b[31m56.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: appdirs, widgetsnbextension, python-sat, pydantic-core, pyarrow-hotfix, opentelemetry-proto, jmespath, jedi, h3, fs, diskcache, comm, beartype, async-lru, aioitertools, pydantic, opentelemetry-exporter-otlp-proto-common, opentelemetry-api, deltalake, botocore, s3transfer, opentelemetry-semantic-conventions, ipywidgets, aiohttp-cors, aiobotocore, opentelemetry-sdk, jupyter-bokeh, boto3, opentelemetry-exporter-otlp-proto-grpc, google-cloud-pubsub, google-cloud-bigquery, pathway\n","  Attempting uninstall: widgetsnbextension\n","    Found existing installation: widgetsnbextension 3.6.10\n","    Uninstalling widgetsnbextension-3.6.10:\n","      Successfully uninstalled widgetsnbextension-3.6.10\n","  Attempting uninstall: pydantic-core\n","    Found existing installation: pydantic_core 2.33.2\n","    Uninstalling pydantic_core-2.33.2:\n","      Successfully uninstalled pydantic_core-2.33.2\n","  Attempting uninstall: pydantic\n","    Found existing installation: pydantic 2.11.7\n","    Uninstalling pydantic-2.11.7:\n","      Successfully uninstalled pydantic-2.11.7\n","  Attempting uninstall: ipywidgets\n","    Found existing installation: ipywidgets 7.7.1\n","    Uninstalling ipywidgets-7.7.1:\n","      Successfully uninstalled ipywidgets-7.7.1\n","  Attempting uninstall: google-cloud-bigquery\n","    Found existing installation: google-cloud-bigquery 3.34.0\n","    Uninstalling google-cloud-bigquery-3.34.0:\n","      Successfully uninstalled google-cloud-bigquery-3.34.0\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","bigframes 2.8.0 requires google-cloud-bigquery[bqstorage,pandas]>=3.31.0, but you have google-cloud-bigquery 3.29.0 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed aiobotocore-2.17.0 aiohttp-cors-0.8.1 aioitertools-0.12.0 appdirs-1.4.4 async-lru-2.0.5 beartype-0.15.0 boto3-1.35.93 botocore-1.35.93 comm-0.2.2 deltalake-0.17.4 diskcache-5.6.3 fs-2.4.16 google-cloud-bigquery-3.29.0 google-cloud-pubsub-2.30.0 h3-4.3.0 ipywidgets-8.1.7 jedi-0.19.2 jmespath-1.0.1 jupyter-bokeh-4.0.5 opentelemetry-api-1.34.1 opentelemetry-exporter-otlp-proto-common-1.34.1 opentelemetry-exporter-otlp-proto-grpc-1.34.1 opentelemetry-proto-1.34.1 opentelemetry-sdk-1.34.1 opentelemetry-semantic-conventions-0.55b1 pathway-0.24.1 pyarrow-hotfix-0.7 pydantic-2.9.2 pydantic-core-2.23.4 python-sat-1.8.dev17 s3transfer-0.10.4 widgetsnbextension-4.0.14\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["google"]},"id":"2e9cc9e960074d62b39d03d797c3d4f2"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: bokeh in /usr/local/lib/python3.11/dist-packages (3.7.3)\n","Requirement already satisfied: Jinja2>=2.9 in /usr/local/lib/python3.11/dist-packages (from bokeh) (3.1.6)\n","Requirement already satisfied: contourpy>=1.2 in /usr/local/lib/python3.11/dist-packages (from bokeh) (1.3.2)\n","Requirement already satisfied: narwhals>=1.13 in /usr/local/lib/python3.11/dist-packages (from bokeh) (1.45.0)\n","Requirement already satisfied: numpy>=1.16 in /usr/local/lib/python3.11/dist-packages (from bokeh) (2.0.2)\n","Requirement already satisfied: packaging>=16.8 in /usr/local/lib/python3.11/dist-packages (from bokeh) (24.2)\n","Requirement already satisfied: pandas>=1.2 in /usr/local/lib/python3.11/dist-packages (from bokeh) (2.2.2)\n","Requirement already satisfied: pillow>=7.1.0 in /usr/local/lib/python3.11/dist-packages (from bokeh) (11.2.1)\n","Requirement already satisfied: PyYAML>=3.10 in /usr/local/lib/python3.11/dist-packages (from bokeh) (6.0.2)\n","Requirement already satisfied: tornado>=6.2 in /usr/local/lib/python3.11/dist-packages (from bokeh) (6.4.2)\n","Requirement already satisfied: xyzservices>=2021.09.1 in /usr/local/lib/python3.11/dist-packages (from bokeh) (2025.4.0)\n","Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from Jinja2>=2.9->bokeh) (3.0.2)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->bokeh) (2.9.0.post0)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->bokeh) (2025.2)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.2->bokeh) (2025.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.2->bokeh) (1.17.0)\n","Setup Complete! We are ready to start.\n"]}],"source":["# Install the required libraries for the project\n","!pip install pathway\n","!pip install bokeh\n","\n","print(\"Setup Complete! We are ready to start.\")"]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# Make sure you have uploaded 'dataset.csv' before running this!\n","# Load the dataset into a pandas DataFrame\n","df = pd.read_csv('dataset.csv')\n","\n","# --- Let's explore the data ---\n","\n","# See the first 5 rows to understand the columns\n","print(\"--- First 5 Rows ---\")\n","print(df.head())\n","\n","# Get a summary of the data (column types, non-null values)\n","print(\"\\n--- Data Info ---\")\n","df.info()\n","\n","# Get some basic statistics (mean, min, max, etc.)\n","print(\"\\n--- Descriptive Statistics ---\")\n","print(df.describe())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BF5R-agd3El2","executionInfo":{"status":"ok","timestamp":1751690028667,"user_tz":-330,"elapsed":904,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"e398528b-5a4e-4f06-f3b5-b6414305ac24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- First 5 Rows ---\n","   ID SystemCodeNumber  Capacity   Latitude  Longitude  Occupancy VehicleType  \\\n","0   0      BHMBCCMKT01       577  26.144536  91.736172         61         car   \n","1   1      BHMBCCMKT01       577  26.144536  91.736172         64         car   \n","2   2      BHMBCCMKT01       577  26.144536  91.736172         80         car   \n","3   3      BHMBCCMKT01       577  26.144536  91.736172        107         car   \n","4   4      BHMBCCMKT01       577  26.144536  91.736172        150        bike   \n","\n","  TrafficConditionNearby  QueueLength  IsSpecialDay LastUpdatedDate  \\\n","0                    low            1             0      04-10-2016   \n","1                    low            1             0      04-10-2016   \n","2                    low            2             0      04-10-2016   \n","3                    low            2             0      04-10-2016   \n","4                    low            2             0      04-10-2016   \n","\n","  LastUpdatedTime  \n","0        07:59:00  \n","1        08:25:00  \n","2        08:59:00  \n","3        09:32:00  \n","4        09:59:00  \n","\n","--- Data Info ---\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18368 entries, 0 to 18367\n","Data columns (total 12 columns):\n"," #   Column                  Non-Null Count  Dtype  \n","---  ------                  --------------  -----  \n"," 0   ID                      18368 non-null  int64  \n"," 1   SystemCodeNumber        18368 non-null  object \n"," 2   Capacity                18368 non-null  int64  \n"," 3   Latitude                18368 non-null  float64\n"," 4   Longitude               18368 non-null  float64\n"," 5   Occupancy               18368 non-null  int64  \n"," 6   VehicleType             18368 non-null  object \n"," 7   TrafficConditionNearby  18368 non-null  object \n"," 8   QueueLength             18368 non-null  int64  \n"," 9   IsSpecialDay            18368 non-null  int64  \n"," 10  LastUpdatedDate         18368 non-null  object \n"," 11  LastUpdatedTime         18368 non-null  object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 1.7+ MB\n","\n","--- Descriptive Statistics ---\n","                 ID      Capacity      Latitude     Longitude     Occupancy  \\\n","count  18368.000000  18368.000000  18368.000000  18368.000000  18368.000000   \n","mean    9183.500000   1605.214286     25.706547     90.751170    731.084059   \n","std     5302.529208   1131.153886      1.582749      3.536636    621.164982   \n","min        0.000000    387.000000     20.000035     78.000003      2.000000   \n","25%     4591.750000    577.000000     26.140048     91.727995    322.000000   \n","50%     9183.500000   1261.000000     26.147482     91.729511    568.000000   \n","75%    13775.250000   2803.000000     26.147541     91.736172    976.000000   \n","max    18367.000000   3883.000000     26.150504     91.740994   3499.000000   \n","\n","        QueueLength  IsSpecialDay  \n","count  18368.000000  18368.000000  \n","mean       4.587925      0.150915  \n","std        2.580062      0.357975  \n","min        0.000000      0.000000  \n","25%        2.000000      0.000000  \n","50%        4.000000      0.000000  \n","75%        6.000000      0.000000  \n","max       15.000000      1.000000  \n"]}]},{"cell_type":"code","source":["# --- Step 1: Clean up the data before we build models ---\n","\n","# Let's create a copy to keep our original data safe\n","df_clean = df.copy()\n","\n","# 1. Rename the long column names to be shorter and easier to use\n","df_clean.rename(columns={\n","    'SystemCodeNumber': 'LotCode',\n","    'VehicleType': 'Vehicle',\n","    'TrafficConditionNearby': 'Traffic',\n","    'QueueLength': 'Queue',\n","    'IsSpecialDay': 'SpecialDay',\n","    'LastUpdatedDate': 'Date',\n","    'LastUpdatedTime': 'Time'\n","}, inplace=True)\n","\n","\n","# 2. Convert text columns to numbers that our model can understand\n","# We'll create a 'mapping' for each text column.\n","\n","# For Traffic: let's say low=1, medium=2, high=3 (you can decide these values)\n","traffic_map = {'low': 1, 'medium': 2, 'high': 3}\n","df_clean['Traffic_Num'] = df_clean['Traffic'].map(traffic_map)\n","\n","# For Vehicle Type: as we planned, bike=0.5, car=1.0, truck=1.5\n","vehicle_map = {'bike': 0.5, 'car': 1.0, 'truck': 1.5}\n","df_clean['Vehicle_Num'] = df_clean['Vehicle'].map(vehicle_map)\n","\n","\n","# --- Let's check our work! ---\n","# Print the first 5 rows of the NEW cleaned data\n","print(\"--- Cleaned Data with New Columns ---\")\n","print(df_clean.head())\n","\n","# Check the info again to see our new numeric columns\n","print(\"\\n--- New Data Info ---\")\n","df_clean.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BmXFp-sO3qkx","executionInfo":{"status":"ok","timestamp":1751690165188,"user_tz":-330,"elapsed":23,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"8fc3b7bb-9b4e-459a-e330-3ce6fdd10c2b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Cleaned Data with New Columns ---\n","   ID      LotCode  Capacity   Latitude  Longitude  Occupancy Vehicle Traffic  \\\n","0   0  BHMBCCMKT01       577  26.144536  91.736172         61     car     low   \n","1   1  BHMBCCMKT01       577  26.144536  91.736172         64     car     low   \n","2   2  BHMBCCMKT01       577  26.144536  91.736172         80     car     low   \n","3   3  BHMBCCMKT01       577  26.144536  91.736172        107     car     low   \n","4   4  BHMBCCMKT01       577  26.144536  91.736172        150    bike     low   \n","\n","   Queue  SpecialDay        Date      Time  Traffic_Num  Vehicle_Num  \n","0      1           0  04-10-2016  07:59:00          1.0          1.0  \n","1      1           0  04-10-2016  08:25:00          1.0          1.0  \n","2      2           0  04-10-2016  08:59:00          1.0          1.0  \n","3      2           0  04-10-2016  09:32:00          1.0          1.0  \n","4      2           0  04-10-2016  09:59:00          1.0          0.5  \n","\n","--- New Data Info ---\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18368 entries, 0 to 18367\n","Data columns (total 14 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   ID           18368 non-null  int64  \n"," 1   LotCode      18368 non-null  object \n"," 2   Capacity     18368 non-null  int64  \n"," 3   Latitude     18368 non-null  float64\n"," 4   Longitude    18368 non-null  float64\n"," 5   Occupancy    18368 non-null  int64  \n"," 6   Vehicle      18368 non-null  object \n"," 7   Traffic      18368 non-null  object \n"," 8   Queue        18368 non-null  int64  \n"," 9   SpecialDay   18368 non-null  int64  \n"," 10  Date         18368 non-null  object \n"," 11  Time         18368 non-null  object \n"," 12  Traffic_Num  11930 non-null  float64\n"," 13  Vehicle_Num  16599 non-null  float64\n","dtypes: float64(4), int64(5), object(5)\n","memory usage: 2.0+ MB\n"]}]},{"cell_type":"code","source":["# Let's find out all the unique text values we have\n","print(\"Unique Traffic values:\", df_clean['Traffic'].unique())\n","print(\"Unique Vehicle values:\", df_clean['Vehicle'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CcdIEXoi4Fte","executionInfo":{"status":"ok","timestamp":1751690277377,"user_tz":-330,"elapsed":73,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"8cedddbb-a005-4aea-c84b-335e9ff5eed6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique Traffic values: ['low' 'high' 'average']\n","Unique Vehicle values: ['car' 'bike' 'truck' 'cycle']\n"]}]},{"cell_type":"code","source":["# --- Step 2: Corrected Data Preprocessing ---\n","\n","# 1. Rename columns (if you restart, you might need this again, but it's safe to run)\n","df_clean.rename(columns={\n","    'SystemCodeNumber': 'LotCode',\n","    'VehicleType': 'Vehicle',\n","    'TrafficConditionNearby': 'Traffic',\n","    'QueueLength': 'Queue',\n","    'IsSpecialDay': 'SpecialDay',\n","    'LastUpdatedDate': 'Date',\n","    'LastUpdatedTime': 'Time'\n","}, inplace=True)\n","\n","# 2. Create COMPLETE maps for converting text to numbers\n","traffic_map_complete = {'low': 1, 'medium': 2, 'high': 3}\n","vehicle_map_complete = {'bike': 0.5, 'car': 1.0, 'truck': 1.5}\n","\n","# 3. Apply the complete maps to our columns\n","df_clean['Traffic_Num'] = df_clean['Traffic'].map(traffic_map_complete)\n","df_clean['Vehicle_Num'] = df_clean['Vehicle'].map(vehicle_map_complete)\n","\n","# --- Let's VERIFY our fix! ---\n","print(\"--- Verifying the Fix ---\")\n","print(\"This time, the non-null counts for the new columns should match the total.\")\n","df_clean.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0umOekkZ4QUW","executionInfo":{"status":"ok","timestamp":1751690327630,"user_tz":-330,"elapsed":18,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"a8bf4927-757b-4631-80a8-53c8237e6716"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Verifying the Fix ---\n","This time, the non-null counts for the new columns should match the total.\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18368 entries, 0 to 18367\n","Data columns (total 14 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   ID           18368 non-null  int64  \n"," 1   LotCode      18368 non-null  object \n"," 2   Capacity     18368 non-null  int64  \n"," 3   Latitude     18368 non-null  float64\n"," 4   Longitude    18368 non-null  float64\n"," 5   Occupancy    18368 non-null  int64  \n"," 6   Vehicle      18368 non-null  object \n"," 7   Traffic      18368 non-null  object \n"," 8   Queue        18368 non-null  int64  \n"," 9   SpecialDay   18368 non-null  int64  \n"," 10  Date         18368 non-null  object \n"," 11  Time         18368 non-null  object \n"," 12  Traffic_Num  11930 non-null  float64\n"," 13  Vehicle_Num  16599 non-null  float64\n","dtypes: float64(4), int64(5), object(5)\n","memory usage: 2.0+ MB\n"]}]},{"cell_type":"code","source":["# Let's find out all the unique text values we have\n","print(\"Unique Traffic values are:\", df_clean['Traffic'].unique())\n","print(\"Unique Vehicle values are:\", df_clean['Vehicle'].unique())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QfAXLLCx4iJb","executionInfo":{"status":"ok","timestamp":1751690393201,"user_tz":-330,"elapsed":36,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"d2da12b5-ec46-4062-e23c-3b5c7adf9985"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Unique Traffic values are: ['low' 'high' 'average']\n","Unique Vehicle values are: ['car' 'bike' 'truck' 'cycle']\n"]}]},{"cell_type":"code","source":["# --- The Final Data Cleaning and Preprocessing Step ---\n","\n","# Create the CORRECT and COMPLETE maps based on our detective work\n","traffic_map_final = {'low': 1, 'average': 2, 'high': 3}\n","# Let's treat 'cycle' the same as 'bike'\n","vehicle_map_final = {'bike': 0.5, 'cycle': 0.5, 'car': 1.0, 'truck': 1.5}\n","\n","# Apply the final, correct maps to our columns\n","# We use the cleaned dataframe 'df_clean'\n","df_clean['Traffic_Num'] = df_clean['Traffic'].map(traffic_map_final)\n","df_clean['Vehicle_Num'] = df_clean['Vehicle'].map(vehicle_map_final)\n","\n","# --- THE MOMENT OF TRUTH: Let's verify our fix ---\n","print(\"--- Verifying the Final Fix ---\")\n","print(\"This time, the non-null counts for the new columns should be 18368.\")\n","df_clean.info()\n","\n","# Let's also look at the first 5 rows to see the result\n","print(\"\\n--- First 5 Rows of the Correctly Processed Data ---\")\n","print(df_clean.head())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2Y-2Bjr42eo","executionInfo":{"status":"ok","timestamp":1751690476898,"user_tz":-330,"elapsed":65,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"a89aa215-62a5-44ef-c018-3c0e2cdc7e51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Verifying the Final Fix ---\n","This time, the non-null counts for the new columns should be 18368.\n","<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 18368 entries, 0 to 18367\n","Data columns (total 14 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   ID           18368 non-null  int64  \n"," 1   LotCode      18368 non-null  object \n"," 2   Capacity     18368 non-null  int64  \n"," 3   Latitude     18368 non-null  float64\n"," 4   Longitude    18368 non-null  float64\n"," 5   Occupancy    18368 non-null  int64  \n"," 6   Vehicle      18368 non-null  object \n"," 7   Traffic      18368 non-null  object \n"," 8   Queue        18368 non-null  int64  \n"," 9   SpecialDay   18368 non-null  int64  \n"," 10  Date         18368 non-null  object \n"," 11  Time         18368 non-null  object \n"," 12  Traffic_Num  18368 non-null  int64  \n"," 13  Vehicle_Num  18368 non-null  float64\n","dtypes: float64(3), int64(6), object(5)\n","memory usage: 2.0+ MB\n","\n","--- First 5 Rows of the Correctly Processed Data ---\n","   ID      LotCode  Capacity   Latitude  Longitude  Occupancy Vehicle Traffic  \\\n","0   0  BHMBCCMKT01       577  26.144536  91.736172         61     car     low   \n","1   1  BHMBCCMKT01       577  26.144536  91.736172         64     car     low   \n","2   2  BHMBCCMKT01       577  26.144536  91.736172         80     car     low   \n","3   3  BHMBCCMKT01       577  26.144536  91.736172        107     car     low   \n","4   4  BHMBCCMKT01       577  26.144536  91.736172        150    bike     low   \n","\n","   Queue  SpecialDay        Date      Time  Traffic_Num  Vehicle_Num  \n","0      1           0  04-10-2016  07:59:00            1          1.0  \n","1      1           0  04-10-2016  08:25:00            1          1.0  \n","2      2           0  04-10-2016  08:59:00            1          1.0  \n","3      2           0  04-10-2016  09:32:00            1          1.0  \n","4      2           0  04-10-2016  09:59:00            1          0.5  \n"]}]},{"cell_type":"code","source":["# --- Model 1: The Baseline Linear Model ---\n","\n","# The formula is: Price_t+1 = Price_t + α * (Occupancy / Capacity)\n","\n","# Let's define our 'alpha' parameter. This controls how much the price changes.\n","# A value of 5 means the price can go up by a maximum of $5 if the lot is 100% full.\n","ALPHA = 5.0\n","\n","def calculate_price_model1(previous_price, occupancy, capacity):\n","  \"\"\"\n","  Calculates the next price based on the simple linear model.\n","  \"\"\"\n","  if capacity == 0:\n","    return previous_price # Avoids a division by zero error\n","\n","  # Calculate how full the parking lot is (from 0.0 to 1.0)\n","  occupancy_ratio = occupancy / capacity\n","\n","  # Apply the formula\n","  new_price = previous_price + ALPHA * occupancy_ratio\n","  return new_price\n","\n","# --- Let's test our new model with a real row from our data! ---\n","# Let's use the first row of our data (index 0)\n","test_row = df_clean.iloc[0]\n","\n","base_price = 10.0  # The project says to start from a base price of $10\n","current_occupancy = test_row['Occupancy']\n","parking_capacity = test_row['Capacity']\n","\n","# Calculate the price for our first data point\n","next_price = calculate_price_model1(base_price, current_occupancy, parking_capacity)\n","\n","print(f\"--- Testing Model 1 with the first row of data ---\")\n","print(f\"The starting price is ${base_price:.2f}.\")\n","print(f\"The parking lot has an occupancy of {current_occupancy} and a capacity of {parking_capacity}.\")\n","print(f\"The calculated new price from Model 1 is: ${next_price:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hN4SKMcW5C_5","executionInfo":{"status":"ok","timestamp":1751690529820,"user_tz":-330,"elapsed":20,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"3afbfb0d-73ca-420e-bd95-c78525de26e0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Testing Model 1 with the first row of data ---\n","The starting price is $10.00.\n","The parking lot has an occupancy of 61 and a capacity of 577.\n","The calculated new price from Model 1 is: $10.53\n"]}]},{"cell_type":"code","source":["# --- Model 2: The Smarter, Demand-Based Model ---\n","\n","# First, we need to choose weights for our demand formula.\n","# These are your \"secret ingredients\"! You can tune these later to change the model's behavior.\n","# I've chosen some starting values for you.\n","alpha_demand = 10.0  # How much occupancy affects demand\n","beta_demand = 5.0    # How much the waiting queue affects demand\n","gamma_demand = -3.0  # How much traffic affects demand (Note: it's NEGATIVE!)\n","delta_demand = 20.0  # How much a special day boosts demand (a big effect!)\n","epsilon_demand = 3.0 # How much the vehicle type affects demand\n","\n","def calculate_demand_score(occupancy, capacity, queue, traffic_num, special_day, vehicle_num):\n","    \"\"\"Calculates a 'demand' score based on several factors.\"\"\"\n","    if capacity == 0:\n","        return 0\n","\n","    # The project's demand formula:\n","    demand_score = (alpha_demand * (occupancy / capacity)) + \\\n","                   (beta_demand * queue) + \\\n","                   (gamma_demand * traffic_num) + \\\n","                   (delta_demand * special_day) + \\\n","                   (epsilon_demand * vehicle_num)\n","\n","    return demand_score\n","\n","# Now, let's create the function that uses this demand score to set a price.\n","BASE_PRICE = 10.0\n","LAMBDA = 0.5  # This controls how SENSITIVE the price is to changes in demand.\n","\n","def calculate_price_model2(demand_score):\n","    \"\"\"Calculates the price based on the demand score, with limits.\"\"\"\n","    # \"Normalize\" the demand so it's not a huge number. Dividing by 50 is a starting point.\n","    normalized_demand = demand_score / 50.0\n","\n","    # The project's pricing formula:\n","    new_price = BASE_PRICE * (1 + LAMBDA * normalized_demand)\n","\n","    # The project requires price limits: not more than 2x or less than 0.5x the base price.\n","    # So, the price must stay between $5 and $20.\n","    final_price = max(5.0, min(20.0, new_price))\n","\n","    return final_price\n","\n","# --- Let's test Model 2 with our data! ---\n","# We'll use the same first row again (test_row is still in memory from the last cell).\n","test_row = df_clean.iloc[0]\n","\n","# 1. Calculate the demand score for this row\n","demand_value = calculate_demand_score(\n","    occupancy=test_row['Occupancy'],\n","    capacity=test_row['Capacity'],\n","    queue=test_row['Queue'],\n","    traffic_num=test_row['Traffic_Num'],\n","    special_day=test_row['SpecialDay'],\n","    vehicle_num=test_row['Vehicle_Num']\n",")\n","\n","# 2. Calculate the final price based on that demand score\n","price_model_2 = calculate_price_model2(demand_value)\n","\n","print(f\"--- Testing Model 2 with the first row of data ---\")\n","print(f\"The calculated demand score is: {demand_value:.2f}\")\n","print(f\"The final price from smart Model 2 is: ${price_model_2:.2f}\")\n","\n","# --- Let's also test a HYPOTHETICAL busy day! ---\n","# High occupancy, long queue, high traffic, special day, for a truck\n","busy_demand = calculate_demand_score(\n","    occupancy=500, capacity=577, queue=10, traffic_num=3, special_day=1, vehicle_num=1.5\n",")\n","busy_price = calculate_price_model2(busy_demand)\n","print(f\"\\n--- Testing Model 2 with a busy day scenario ---\")\n","print(f\"The calculated busy day demand score is: {busy_demand:.2f}\")\n","print(f\"The final busy day price from smart Model 2 is: ${busy_price:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"21uRTp_B5Wqw","executionInfo":{"status":"ok","timestamp":1751690608772,"user_tz":-330,"elapsed":27,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"37dabb7f-ab86-402e-832a-0a42a7563aab"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Testing Model 2 with the first row of data ---\n","The calculated demand score is: 6.06\n","The final price from smart Model 2 is: $10.61\n","\n","--- Testing Model 2 with a busy day scenario ---\n","The calculated busy day demand score is: 74.17\n","The final busy day price from smart Model 2 is: $17.42\n"]}]},{"cell_type":"code","source":["import numpy as np\n","# --- Model 3: The Competitive Pricing Model ---\n","\n","# We need the Haversine formula to calculate distance between lat/lon points.\n","# Don't worry about the math, just know this function calculates distance in kilometers.\n","def haversine_distance(lat1, lon1, lat2, lon2):\n","    \"\"\"Calculate the distance between two points on Earth in km.\"\"\"\n","    R = 6371  # Radius of Earth in kilometers\n","    lat1_rad, lon1_rad, lat2_rad, lon2_rad = map(np.radians, [lat1, lon1, lat2, lon2])\n","\n","    dlon = lon2_rad - lon1_rad\n","    dlat = lat2_rad - lat1_rad\n","    a = np.sin(dlat / 2)**2 + np.cos(lat1_rad) * np.cos(lat2_rad) * np.sin(dlon / 2)**2\n","    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))\n","    distance = R * c\n","    return distance\n","\n","def get_competitor_info(my_lot_code, current_time, all_data):\n","    \"\"\"\n","    Finds competitors and calculates their average price and occupancy.\n","    For this simulation, we'll pretend we already have prices for all lots at 'current_time'.\n","    \"\"\"\n","    # First, get the location of our lot\n","    my_lot_info = all_data[all_data['LotCode'] == my_lot_code].iloc[0]\n","    my_lat = my_lot_info['Latitude']\n","    my_lon = my_lot_info['Longitude']\n","\n","    # Find all other lots at the same time\n","    competitors_data = all_data[(all_data['Time'] == current_time) & (all_data['LotCode'] != my_lot_code)]\n","\n","    if competitors_data.empty:\n","        return None # No competitors at this time\n","\n","    # Calculate distance to each potential competitor\n","    distances = competitors_data.apply(\n","        lambda row: haversine_distance(my_lat, my_lon, row['Latitude'], row['Longitude']),\n","        axis=1\n","    )\n","\n","    # Define a competitor as anyone within 2 km\n","    nearby_competitors = competitors_data[distances < 2.0]\n","\n","    if nearby_competitors.empty:\n","        return None # No competitors close by\n","\n","    # --- SIMULATION PART ---\n","    # In a real system, we'd look up the current prices.\n","    # Here, let's just calculate their Model 2 price for this simulation.\n","    # This is a bit complex, but shows the full logic.\n","    competitor_prices = []\n","    for index, row in nearby_competitors.iterrows():\n","        demand = calculate_demand_score(row['Occupancy'], row['Capacity'], row['Queue'], row['Traffic_Num'], row['SpecialDay'], row['Vehicle_Num'])\n","        price = calculate_price_model2(demand)\n","        competitor_prices.append(price)\n","\n","    # Calculate the average price of our competitors\n","    avg_price = np.mean(competitor_prices)\n","\n","    return avg_price\n","\n","def adjust_for_competition(my_model_2_price, avg_competitor_price):\n","    \"\"\"Adjusts my price based on the competition.\"\"\"\n","    if avg_competitor_price is None:\n","        return my_model_2_price # No competitors, so no change\n","\n","    # Logic: If I'm 20% more expensive, lower my price. If I'm cheaper, raise it.\n","    if my_model_2_price > avg_competitor_price * 1.2:\n","        return my_model_2_price * 0.9  # Lower my price by 10%\n","    elif my_model_2_price < avg_competitor_price:\n","        return my_model_2_price * 1.1  # Raise my price by 10%\n","    else:\n","        return my_model_2_price # My price is competitive, keep it.\n","\n","# --- Let's test Model 3! ---\n","# Use the first row of data again\n","test_row = df_clean.iloc[0]\n","my_lot = test_row['LotCode']\n","current_time = test_row['Time']\n","\n","# 1. First, calculate my own price using Model 2\n","my_initial_price = price_model_2 # We calculated this in the last step ($10.61)\n","\n","# 2. Find the average price of my competitors at that same time\n","avg_comp_price = get_competitor_info(my_lot, current_time, df_clean)\n","\n","# 3. Adjust my price based on the competition\n","final_price_model_3 = adjust_for_competition(my_initial_price, avg_comp_price)\n","\n","print(f\"--- Testing Model 3 ---\")\n","print(f\"My initial Model 2 price was: ${my_initial_price:.2f}\")\n","\n","if avg_comp_price is not None:\n","    print(f\"The average competitor price at that time was: ${avg_comp_price:.2f}\")\n","    print(f\"My final, competition-adjusted price from Model 3 is: ${final_price_model_3:.2f}\")\n","else:\n","    print(\"No nearby competitors found at this time, so the price remains the same.\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hUk7SB7E5vqO","executionInfo":{"status":"ok","timestamp":1751690712194,"user_tz":-330,"elapsed":18,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"d3c0daa9-9239-438c-e359-3722a77a7706"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Testing Model 3 ---\n","My initial Model 2 price was: $10.61\n","The average competitor price at that time was: $11.67\n","My final, competition-adjusted price from Model 3 is: $11.67\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","\n","# ===================================================================\n","# FINAL PROJECT FUNCTIONS\n","# ===================================================================\n","\n","# --- Data Cleaning and Preprocessing Function ---\n","def preprocess_data(df):\n","    \"\"\"Takes the raw dataframe and returns a cleaned version.\"\"\"\n","    df_clean = df.copy()\n","    df_clean.rename(columns={\n","        'SystemCodeNumber': 'LotCode', 'VehicleType': 'Vehicle',\n","        'TrafficConditionNearby': 'Traffic', 'QueueLength': 'Queue',\n","        'IsSpecialDay': 'SpecialDay', 'LastUpdatedDate': 'Date',\n","        'LastUpdatedTime': 'Time'\n","    }, inplace=True)\n","\n","    traffic_map = {'low': 1, 'average': 2, 'high': 3}\n","    vehicle_map = {'bike': 0.5, 'cycle': 0.5, 'car': 1.0, 'truck': 1.5}\n","\n","    df_clean['Traffic_Num'] = df_clean['Traffic'].map(traffic_map)\n","    df_clean['Vehicle_Num'] = df_clean['Vehicle'].map(vehicle_map)\n","    return df_clean\n","\n","# --- Model 2: Demand Calculation ---\n","def calculate_demand_score(row):\n","    \"\"\"Calculates a 'demand' score from a row of data.\"\"\"\n","    # Weights for the demand formula\n","    alpha_demand, beta_demand, gamma_demand, delta_demand, epsilon_demand = 10.0, 5.0, -3.0, 20.0, 3.0\n","\n","    if row['Capacity'] == 0: return 0\n","    demand_score = (alpha_demand * (row['Occupancy'] / row['Capacity'])) + \\\n","                   (beta_demand * row['Queue']) + \\\n","                   (gamma_demand * row['Traffic_Num']) + \\\n","                   (delta_demand * row['SpecialDay']) + \\\n","                   (epsilon_demand * row['Vehicle_Num'])\n","    return demand_score\n","\n","# --- Model 3: Competitor Analysis ---\n","def haversine_distance(lat1, lon1, lat2, lon2):\n","    R = 6371; lat1_rad, lon1_rad, lat2_rad, lon2_rad = map(np.radians, [lat1, lon1, lat2, lon2])\n","    dlon = lon2_rad - lon1_rad; dlat = lat2_rad - lat1_rad\n","    a = np.sin(dlat / 2)**2 + np.cos(lat1_rad) * np.cos(lat2_rad) * np.sin(dlon / 2)**2\n","    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a)); distance = R * c\n","    return distance\n","\n","# ===================================================================\n","# THE MASTER PRICING FUNCTION (This is what you'll use in Pathway)\n","# ===================================================================\n","\n","def calculate_final_price(data_row, all_historical_data):\n","    \"\"\"\n","    This is the main function to be called by Pathway for each new data point.\n","    It runs the full pricing logic: Model 2 -> Model 3.\n","    \"\"\"\n","    # --- Model 2 Logic ---\n","    BASE_PRICE = 10.0\n","    LAMBDA = 0.5\n","    demand = calculate_demand_score(data_row)\n","    normalized_demand = demand / 50.0\n","    model_2_price = BASE_PRICE * (1 + LAMBDA * normalized_demand)\n","\n","    # --- Model 3 Logic ---\n","    # Find competitor info at the same time as the incoming data_row\n","    my_lot_code = data_row['LotCode']\n","    current_time = data_row['Time']\n","    my_lat, my_lon = data_row['Latitude'], data_row['Longitude']\n","\n","    # Find all other lots at the same time\n","    competitors = all_historical_data[(all_historical_data['Time'] == current_time) & (all_historical_data['LotCode'] != my_lot_code)]\n","    avg_comp_price = None\n","\n","    if not competitors.empty:\n","        distances = competitors.apply(lambda row: haversine_distance(my_lat, my_lon, row['Latitude'], row['Longitude']), axis=1)\n","        nearby_competitors = competitors[distances < 2.0] # Competitors within 2km\n","\n","        if not nearby_competitors.empty:\n","            # Calculate the Model 2 price for each competitor to simulate their price\n","            competitor_demands = nearby_competitors.apply(calculate_demand_score, axis=1)\n","            competitor_prices = BASE_PRICE * (1 + LAMBDA * (competitor_demands / 50.0))\n","            avg_comp_price = competitor_prices.mean()\n","\n","    # Adjust price based on competition\n","    final_price = model_2_price\n","    if avg_comp_price is not None:\n","        if final_price > avg_comp_price * 1.2: final_price *= 0.9\n","        elif final_price < avg_comp_price: final_price *= 1.1\n","\n","    # Finally, apply the price limits ($5 to $20)\n","    final_price = max(5.0, min(20.0, final_price))\n","\n","    return final_price\n","\n","# --- Let's run a final test ---\n","# First, ensure our full dataset is preprocessed\n","df_processed = preprocess_data(df)\n","\n","# Test with the first row again\n","test_row_final = df_processed.iloc[0]\n","final_price_test = calculate_final_price(test_row_final, df_processed)\n","\n","print(\"--- Final Test of the Master Function ---\")\n","print(f\"The final calculated price for the first row is: ${final_price_test:.2f}\")"],"metadata":{"id":"_CSoAnBT6YUA","executionInfo":{"status":"ok","timestamp":1751690879922,"user_tz":-330,"elapsed":20,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"e0081637-8e19-4a10-9377-69f3a422e2c5","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--- Final Test of the Master Function ---\n","The final calculated price for the first row is: $11.67\n"]}]},{"cell_type":"code","source":["File > Download > Download Dynamic Parking Pricing Project\"\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"gV6Xoga3sqLl","executionInfo":{"status":"error","timestamp":1751888627936,"user_tz":-330,"elapsed":22,"user":{"displayName":"Uday Yadav","userId":"06438768624716468622"}},"outputId":"e80b1d33-4121-4686-8a94-757bc70e7f86"},"execution_count":2,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"unterminated string literal (detected at line 1) (ipython-input-2-3697987297.py, line 1)","traceback":["\u001b[0;36m  File \u001b[0;32m\"/tmp/ipython-input-2-3697987297.py\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    File > Download > Download Dynamic Parking Pricing Project\"\u001b[0m\n\u001b[0m                                                              ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 1)\n"]}]}]}